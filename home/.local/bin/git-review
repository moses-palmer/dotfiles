#!/bin/sh
#
## Reviews a branch from a remote.
##
## This script will keep the remote branch checked out while displaying the
## changes, and then revert to the currently checked out branch or commit.
##
## Usage: git review SOURCE_BRANCH
##        git review SOURCE_COMMIT TARGET_COMMIT.
##        git review --changes SOURCE_BRANCH
##
## SOURCE_BRANCH is the unqualified name of a remote branch. When passing only a
## source branch, the target will be set to the default branch for the default
## remote.
##
## When passing --changes as the first argument, changes to the source branch
## are displayed as a diff. This assumes that the source branch has previously
## been fetched.

set -e
. ~/.local/lib/bash/autohelp


##
# We do not want our modifications to be recorded.
export GIT_RETURN_IGNORE="1"

##
# The current commit or branch.
ORIGINAL="$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse HEAD)"


# Assert that the index is clean and that arguments are passed correctly
if ! git diff-index --quiet HEAD --; then
    echo "Your repository contains local changes."
    exit
elif [ "$1" = "--changes" ]; then
    if [ "$#" = "2" ]; then
        remote="$(git default-remote)"
        current="$(git rev-parse "$remote/$2")"
        git fetch
        next="$(git rev-parse "$remote/$2")"
        if [ "$current" = "$next" ]; then
            echo "No changes."
        else
            /bin/echo -e "Showing upstream changes to \033[1m$2\033[0m."
            git diff "$current".."$next"
        fi
        exit 0
    else
        autohelp
        exit 1
    fi
else
    case "$#" in
        1)
            remote="$(git default-remote)"
            export REVIEW_SOURCE="$remote/$1"
            export REVIEW_TARGET="$remote/$(git default-branch)"
            ;;

        2)
            export REVIEW_SOURCE="$1"
            export REVIEW_TARGET="$2"
            ;;

        *)
            autohelp
            exit 1
            ;;
    esac
fi


# Check out the branch to review
if ! git checkout --quiet "$REVIEW_SOURCE"; then
    /bin/echo -e "\033[1m$REVIEW_SOURCE\033[0m not found locally, fetching..."
    git fetch
    git checkout --quiet "$REVIEW_SOURCE"
fi

# Show an ordered commit log with diffs
/bin/echo -e "Reviewing \033[1m$REVIEW_SOURCE\033[0m" \
    "for merging into \033[1m$REVIEW_TARGET\033[0m."
VIM_PLUGINS="color-theme:ansi-esc" \
vim -S ~/.local/lib/vim/review.vim

# Restore the previous checkout
git checkout --quiet "$ORIGINAL"
