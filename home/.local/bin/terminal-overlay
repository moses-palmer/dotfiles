#!/usr/bin/env python3

import contextlib
import os
import sys
import time

import gi
gi.require_version('DBus', '1.0')
gi.require_version('Gdk', '3.0')
gi.require_version('Gio', '2.0')
gi.require_version('Gtk', '3.0')
gi.require_version('Vte', '2.91')

from gi.repository import GLib, Gdk, Gio, Gtk, Vte


#: The title of the main window.
TITLE = 'Terminal Overlay'

#: The environment variable used to specify the foreground colour.
FG_COLOR_ENV = 'TERMINAL_OVERLAY_FG_COLOR'

#: The default foreground colour.
FG_COLOR_DEFAULT = 'rgba(100%, 100%, 100%, 1.0)'

#: The environment variable used to specify the background colour.
BG_COLOR_ENV = 'TERMINAL_OVERLAY_BG_COLOR'

#: The default background colour.
BG_COLOR_DEFAULT = 'rgba(20%, 20%, 20%, 0.9)'

#: The environment variable used to specify the initial font scale.
FONT_SCALE_ENV = 'TERMINAL_OVERLAY_FONT_SCALE'

#: The default font scale.
FONT_SCALE_DEFAULT = '1.0'

#: The font scale modification when decreasing scaling.
FONT_SCALE_DEC = 0.9

#: The font scale modification when increasing scaling.
FONT_SCALE_INC = 1.0 / FONT_SCALE_DEC

#: The name of the DBus service.
SERVICE_NAME = 'com.newrainsoftware.TerminalOverlay'

#: The path of the DBus service.
SERVICE_PATH = '/' + SERVICE_NAME.replace('.', '/')

#: The DBus service description.
SERVICE_XML = '''
<node>
    <interface name="{}">
        <method name="Hide" />
        <method name="Show" />
        <method name="Toggle" />
        <method name="Exit" />
    </interface>
</node>
'''.format(SERVICE_NAME)

#: The minimum number of secods that must pass between every invocation of
#: main application window visibility toggle.
TOGGLE_THROTTLE = 0.2


def main(command: [str]):
    try:
        Application(
            os.getenv(FG_COLOR_ENV, FG_COLOR_DEFAULT),
            os.getenv(BG_COLOR_ENV, BG_COLOR_DEFAULT),
            os.getenv(FONT_SCALE_ENV, FONT_SCALE_DEFAULT),
            command).run([])
    except ValueError as e:
        sys.stderr.write('{}\n'.format(str(e)))
        sys.exit(1)


class Application(Gtk.Application):
    def __init__(
            self, fg_color: str, bg_color: str, font_scale: str,
            command: [str]):
        super(Application, self).__init__(
            application_id=SERVICE_NAME,
            flags=Gio.ApplicationFlags.FLAGS_NONE)

        self._fg_color = Gdk.RGBA()
        if not self._fg_color.parse(fg_color):
            raise ValueError('invalid foreground colour: {}'.format(fg_color))

        self._bg_color = Gdk.RGBA()
        if not self._bg_color.parse(bg_color):
            raise ValueError('invalid background colour: {}'.format(fg_color))

        try:
            self._font_scale = float(font_scale)
        except ValueError:
            raise ValueError('invalid font scale: {}'.format(font_scale))

        self._command = command

    def do_activate(self, *_args):
        Gtk.Application.do_activate(self)

        window = self._window()
        self.add_window(window)
        terminal = self._terminal()
        window.add(terminal)
        self._register_actions(window, terminal)

        def hide():
            window.hide()

        def show():
            window.show_all()

        def toggle():
            timestamp = getattr(toggle, 'timestamp', 0)
            if time.time() - timestamp < TOGGLE_THROTTLE:
                return
            toggle.timestamp = time.time()

            if window.get_visible():
                hide()
            else:
                show()

        def exit():
            window.destroy()

        self._start_server(
            Hide=hide,
            Show=show,
            Exit=exit,
            Toggle=toggle)

    def _terminal(self) -> Vte.Terminal:
        """Creates the terminal widget and ensures that it runs the command.
        """
        result = Vte.Terminal()
        result.set_color_foreground(self._fg_color)
        result.set_color_background(self._bg_color)
        result.set_font_scale(self._font_scale)
        result.set_allow_bold(True)
        result.set_audible_bell(False)
        result.set_can_focus(True)
        result.set_scroll_on_keystroke(True)
        result.set_scroll_on_output(True)

        if hasattr(result, 'spawn_async'):
            def spawn():
                result.spawn_async(Vte.PtyFlags.DEFAULT, None, self._command,
                    None, GLib.SpawnFlags.SEARCH_PATH, None, -1, -1, None, None)
        else:
            def spawn():
                result.spawn_sync(Vte.PtyFlags.DEFAULT, None, self._command,
                    None, GLib.SpawnFlags.SEARCH_PATH, None, None, None)

        def eof(*_args):
            spawn()
            return True
        result.connect('eof', eof)

        spawn()

        return result

    def _window(self) -> Gtk.ApplicationWindow:
        """Creates the main window.
        """
        result = Gtk.ApplicationWindow(type=Gtk.WindowType.TOPLEVEL)
        result.set_title(TITLE)
        result.set_icon_name('terminal')
        result.set_decorated(False)
        result.set_skip_taskbar_hint(True)
        result.set_skip_pager_hint(True)
        result.set_keep_above(True)
        result.set_accept_focus(True)
        result.set_deletable(False)
        result.set_type_hint(Gdk.WindowTypeHint.DOCK)
        result.set_visual(result.get_screen().get_rgba_visual())

        result.stick()
        result.fullscreen_on_monitor(
            result.get_screen(),
            result.get_screen().get_primary_monitor())

        def delete_event(*_args):
            result.hide()
            return True
        result.connect('delete-event', delete_event)

        def destroy(*_args):
            self.quit()
            return True
        result.connect('destroy', destroy)

        return result

    def _register_actions(self, window: Gtk.Window, terminal: Vte.Terminal):
        """Creates the application actions.
        """
        def action(name, accel, activate, *args):
            action = Gio.SimpleAction(name=name)
            name = action.get_name()
            action.connect('activate', lambda *_: activate(*(
                arg() if callable(arg) else arg
                for arg in args)))
            window.add_action(action)
            self.set_accels_for_action('win.' + name, [accel])

        action(
            'copy',
            '<primary><shift>c',
            terminal.copy_clipboard_format,
            Vte.Format.TEXT)
        action(
            'paste',
            '<primary><shift>v',
            terminal.paste_clipboard)
        action(
            'larger',
            '<primary><shift>Page_Up',
            terminal.set_font_scale,
            lambda: terminal.get_font_scale() * FONT_SCALE_INC)
        action(
            'smaller',
            '<primary><shift>Page_Down',
            terminal.set_font_scale,
            lambda: terminal.get_font_scale() * FONT_SCALE_DEC)
        action(
            'reset',
            '<primary><shift>equal',
            terminal.set_font_scale,
            1.0)

    def _start_server(self, **kwargs):
        """Starts the DBus server.
        """
        Gio.bus_own_name(
            Gio.BusType.SESSION,
            SERVICE_NAME,
            Gio.BusNameOwnerFlags.NONE,
            lambda conn, *_: Gio.DBusConnection.register_object(
                conn,
                SERVICE_PATH,
                Gio.DBusNodeInfo.new_for_xml(SERVICE_XML).interfaces[0],
                lambda _c, _s, _p, _i, meth, *_: Gdk.threads_add_idle(
                    GLib.PRIORITY_DEFAULT_IDLE,
                    kwargs[meth])))


if __name__ == '__main__':
    Gtk.init([])
    main(sys.argv[1:])
