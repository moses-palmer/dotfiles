#!/bin/sh

##
# A list of potential binary names for Python 3
PYTHON3_EXES="python3 python"

##
# The directory containing this script
ROOT="$(dirname "$0")"

##
# The git directory.
GIT_DIR="$ROOT/.git"

##
# The git hook directory.
HOOK_DIR="$GIT_DIR/hooks"

##
# The git hook.
HOOKS="post-checkout.dotfiles post-merge"

##
# A file containing the currently installed dotfile commit
TRACKER_FILE="$ROOT/.git/dotfiles-commit"

##
# The current commit
CURRENT="$(git rev-parse HEAD)"


if [ "$1" = "--only-new-commits" ]; then
    # Discard the flag
    shift

    # Is the current commit the one that is already installed?
    previous="$(cat "$TRACKER_FILE")"
    if [ "$CURRENT" = "$previous" ]; then
        echo "No changes."
        exit
    fi

    # Is a rebase in progress?
    if [ -d "$GIT_DIR/rebase-apply" ] || [ -d "$GIT_DIR/rebase-merge" ]; then
        todo="$GIT_DIR/rebase-merge/git-rebase-todo"
        if [ "$(wc -l "$todo" | cut -d' ' -f1 )" != 0 ]; then
            exit
        fi
    fi
fi


for exe in $PYTHON3_EXES; do
    # Ignore unavailable binaries
    if ! which $exe >/dev/null 2>&1; then
        echo "$exe does not exist"
        continue
    fi

    # Ignore Python versions other than 3
    if ! ( $exe --version | grep 'Python 3' >/dev/null 2>&1 ); then
        $exe --version
        continue
    fi

    # Run the installer and capture the exit code
    PYTHONPATH="$ROOT/src" $exe -m dotfiles "$ROOT" $@
    ret="$?"

    # Update the tracker file
    echo "$CURRENT" >"$TRACKER_FILE"

    # Install hooks
    for hook in $HOOKS; do
        mkdir -p "$HOOK_DIR"
        cat >"$HOOK_DIR/$hook" <<EOF
#!/bin/sh

./install --only-new-commits
EOF
        chmod a+x "$HOOK_DIR/$hook"
        /bin/echo -e "\033[1mInstalled git hook to\033[0m \033[3m$hook\033[0m."
    done

    exit $ret
done


echo "Python 3 is not available as one of $PYTHON3_EXES" >&2
exit 1
